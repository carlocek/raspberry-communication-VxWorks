\***
CONFIGURATION FILE OF TimePetriNet State Space Explorer
WARNING! parameter names shoud not be changed.

Questo file viene autamaticamente letto e aggiornato dal front-end di Oris per l'analizzatore
Rispettare la seguente sintassi:
--> commenti utente: sono delimitati da \/***\,\***/\ e vengono
ignorati dal front-end.

--> commenti integrati: sono delimitati da \/**\,\**/\ e vengono
letti e visualizzati dal front-end.

--> opzioni: ogni opzione comincia con \#\ a cui segue il
nome della opzione (stringa), il valore (stringa) e un commento
opzionale delimitato da \/*\,\*/\ che viene integrato e
visualizzato nel front end.
***/


/**  options:   **/


# passed                        SCG         /* ENUMERATION TYPE:
SCG : State Class Graph based on DBM
MG_cddTimeDom : Exact State Class Federation Graph construction using CDDs.
MG_approxListTimeDom : Approximate State Class Federation Graph construction.
Federations are approximated using lists of DBMs ( dominance relation heuristic driven )
MG_minDBMTimeDom : Marking Graph with minimum dbm approximation of time domains
MG_approxVectorTimeDom :  Approximate State Class Federation Graph construction.
Federations are approximated using vectors of DBMs ( default size = 10 )
*/

# wait                            BFW
/* one of:
BFW : Breadht First
DFW : Depth First
DBW : Depth-Breadth  (default: 10-10)
DSW : Depth-Spread (default: 50-50)
EU_mostUnsafe : heuristic esploration of type mostUnsafe
EU_traceEager : heuristic esploration of type traceEager
EU_markingCover : heuristic esploration of type markingCover
EU_userDriven : heuristic esploration of type userDriven
EU_depthTraceFinder : heuristic esploration of type depthTraceFinder
EU_globalTime :esploration with time limits (default 100 time units)
*/

# warning                          1       /* (1/0) warning if a place contains more than one token
*/

# trace_Observing                  1       /* search the net for two transitions named i_START... and
w_END..., then build observers to calculate the time
between the firing of i_START and the firing of i_END.
It logs the completion time
*/

# trace_Ability                    0       /* search the net for two transitions named i_START... and
w_END..., then build observers to calculate the time
between the firing of i_START and the firing of i_END.
It logs the completion time. It logs the firing sequences
from i_START and i_END.
*/




/** Log options: **/


# file_log                           0       /* log on file(1) or on console(0)                   */

# txt                                1       /* (1/0) print a textual file representing the SCG   */
# xml                                1       /* (1/0) print an xml  file representing the SCG      */
# graph_name                     anonymous   /* the name of the xml graph          */
# print_a_graphml_format             1       /* (1/0) print a file .graphml representing the SCG  */


# max_run                            inf    /* limit on the number of state classes to be expanded
( attention: not on the generated ) */




# generate_Marking_Graph             0       /* generate a marking graph associated to the State class graph,
print on log and on file graphml
has effect only if Passed is SCG    */


/**  options for the generation of State class federation graph:      **/


# log_MG_construction             0       /* log the construction of State class federation graph  */
# print_partial_cdd_file          0       /* print the partial cdd  file every 100 insertion      */
# print_marking_domain            1       /* print the federation domain associated to each marking in the log                   */
#    print_only_cdd_numTiles      0       /* print only the number of cdd tiles */
#    print_xml_format             0       /* if 0 print in txt format,
else print an xml format.                      */

/** options for the generation of Stochastic Class Graph: **/

#    stochastic                   0          /* enumerate the SSCG */
#    accuracy                     1.0e-40    /* precision */
#    stochastic_critical_log      1          /* additional info about SSCG */
#    mpfr_precision_bits          1024       /* Bits used by the MPFR library for number rapresentation. */
#    digits_number                10         /* Maximum number of digits for fractional number writings.  */

/** options for the generation of Approximated Stochastic Class Graph: **/

#    relaxed_comparation          0          /* approximation of zones' density functions */
#    compare_threshold            0.05       /* threshold for the relaxation of equality between state classes */
#    approx_degree               3         /* degree of Bernstein approximation */
#    bernstein_approximation      0          /* approximate zones functions with one bernstein polynomial */
#    zone_threshold              1          /* minimum number of zones that triggers Bernstein approximation */

/** options for the generation of the embedded chain of the Stochastic Class Graph **/

#    scg_embedded_chain           0         /* enumerate the DTMC of the SCG */

/** options for the generation of Regeneration Class Graph: **/

#    regeneration_class_graph     0          /* enumerate the RCG */